# VSTS pipeline to build, test, package, sign and release a new nuget package
#
# Requirements: define the following Azure DevOps connections
#   FSharpLu-nuget      - Nuget feed service connection (for pushing new packages)
#   FSharpLu-Github     - Github service connection (for pushing new releases)
#
# The following variables are settable at queue time.
#  BuildConfiguration
#  BuildPlatform
#  SignBuild       - Set to 'true' if code signing is required
#  PublishRelease  - Set to 'true' to publish a new release to Github and Nuget

queue:
  demands: vstest

variables:
  # Increase version number before every official release (if PublishRelease is set to true)
  NUGET_PACKAGE_VERSION: 0.11.0

steps:
- task: DotNetCoreInstaller@0
  displayName: Use .NET Core sdk 2.1.200
  inputs:
    version: 2.1.200

- powershell: . scripts/Update-AssemblyVersion.ps1 -version $(NUGET_PACKAGE_VERSION)
  displayName: Set assembly/nuget version number

- task: DotNetCoreCLI@2
  displayName: dotnet build for testing
  inputs:
    arguments: '--no-incremental /t:rebuild /p:Configuration="$(BuildConfiguration)"'

- task: VSTest@2
  displayName: Test Assemblies
  inputs:
    testAssemblyVer2: |
     **\*test*.dll
     !**\obj\**
    vsTestVersion: '15.0'
    runInParallel: false
    codeCoverageEnabled: false
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: dotnet build with delaysigning
  inputs:
    arguments: '--no-incremental /t:rebuild /p:Configuration="$(BuildConfiguration)" /p:CompilationSymbols=DELAYSIGNING'

- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: ESRP CodeSign .Net assemblies
  condition: eq(variables['SignBuild'], 'true')
  inputs:
    ConnectedServiceName: 'MSR Springfield Code Signing'
    FolderPath: '$(System.DefaultWorkingDirectory)'
    Pattern: 'microsoft.fsharplu.windows.dll,microsoft.fsharplu.dll,microsoft.fsharplu.json.dll'
    signConfigType: inlineSignParams
    inlineOperation: |
     [
         {
             "keyCode": "CP-235845-SN",
             "operationSetCode": "StrongNameSign",
             "parameters": [ ],
             "toolName": "sign",
             "toolVersion": "1.0"
         },
         {
             "keyCode": "CP-235845-SN",
             "operationSetCode": "StrongNameVerify",
             "parameters": [ ],
             "toolName": "sign",
             "toolVersion": "1.0"
         }
     ]

- task: DotNetCoreCLI@2
  displayName: dotnet pack nuget
  inputs:
    command: pack
    searchPatternPack: '**/*.fsproj'
    outputDir: '$(Build.ArtifactStagingDirectory)\nuget'
    versioningScheme: byEnvVar
    versionEnvVar: 'NUGET_PACKAGE_VERSION'

- task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
  displayName: ESRP CodeSign Nuget Package
  condition: eq(variables['SignBuild'], 'true')
  inputs:
    ConnectedServiceName: 'MSR Springfield Code Signing'
    FolderPath: '$(Build.ArtifactStagingDirectory)\nuget'
    Pattern: '*.nupkg'
    signConfigType: inlineSignParams
    inlineOperation: |
     [
         {
             "keyCode": "CP-401405",
             "operationSetCode": "NuGetSign",
             "parameters": [ ],
             "toolName": "sign",
             "toolVersion": "1.0"
         },
         {
             "keyCode": "CP-401405",
             "operationSetCode": "NuGetVerify",
             "parameters": [ ],
             "toolName": "sign",
             "toolVersion": "1.0"
         }
     ]

- task: DotNetCoreCLI@2
  displayName: dotnet push nuget
  inputs:
    command: push
    searchPatternPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    feedPublish: '6b4e3a7d-b009-4842-b76e-fb9a587cdc50'
  enabled: false

- task: PublishSymbols@2
  displayName: Publish symbols
  inputs:
    SearchPattern: '**\bin\**\*.pdb'
    SymbolServerType: TeamServices
    SymbolsProduct: Microsoft.FSharpLu
    SymbolsVersion: '$( NUGET_PACKAGE_VERSION)'
  continueOnError: true

- task: CopyFiles@2
  displayName: Binplace built assemblies
  enabled: false
  inputs:
    Contents: '**\bin\**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)\build'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'

- task: GitHubRelease@0
  condition: eq(variables['PublishRelease'], 'true')
  inputs:
    gitHubConnection: 'FSharpLu-Github'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tag: 'release-$(Build.SourceVersion)'
    tagSource: 'manual'
    title: 'FSharpLu Release $(NUGET_PACKAGE_VERSION)'
    releaseNotesSource: 'input'
    releaseNotes: 'Signed release $(NUGET_PACKAGE_VERSION)

      https://www.nuget.org/packages/Microsoft.FSharpLu/
      https://www.nuget.org/packages/Microsoft.FSharpLu.Json/
      https://www.nuget.org/packages/Microsoft.FSharpLu.Windows/'
    isDraft: true

- task: NuGetCommand@2
  displayName: Publish release to nuget
  condition: eq(variables['PublishRelease'], 'true')
  inputs:
    command: 'push'
    packagesToPush: '$(Build.ArtifactStagingDirectory)/**/Microsoft.*.nupkg;!$(Build.ArtifactStagingDirectory)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'FSharpLu-nuget'